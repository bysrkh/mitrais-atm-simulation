package com.github.bysrkh.mitraisatmsimulation.service.impl;

import com.github.bysrkh.mitraisatmsimulation.component.InputHelper;
import com.github.bysrkh.mitraisatmsimulation.domain.Account;
import com.github.bysrkh.mitraisatmsimulation.domain.BalanceHistory;
import com.github.bysrkh.mitraisatmsimulation.domain.Menu;
import com.github.bysrkh.mitraisatmsimulation.domain.TransferredAccount;
import com.github.bysrkh.mitraisatmsimulation.dto.Result;
import com.github.bysrkh.mitraisatmsimulation.repository.AccountRepository;
import com.github.bysrkh.mitraisatmsimulation.service.AccountService;
import com.github.bysrkh.mitraisatmsimulation.service.FundTransferService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.function.Function;

import static com.github.bysrkh.mitraisatmsimulation.NavigationConstant.INVALID;
import static com.github.bysrkh.mitraisatmsimulation.NavigationConstant.VALID;
import static java.util.stream.Collectors.joining;

@Service
public class FundTransferServiceImpl implements FundTransferService {

    @Autowired
    private InputHelper inputHelper;

    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private AccountService accountService;

    private Function<Map.Entry, String> extractValue = values -> String.format("%s. %s\n", values.getKey(), values.getValue());
    private Menu menu = new Menu();

    @Override
    public void inputTransferedAccount(Result<Account> result) {
        result.setChoose(INVALID);
        TransferredAccount transferredAccount = new TransferredAccount();
        transferredAccount.setAccountNumber(inputHelper.prompt("Please enter destination account and press enter to continue or\npress enter to go back to Transaction "));
        if (StringUtils.isBlank(transferredAccount.getAccountNumber())) {
            return;
        }
        transferredAccount.setTransferredAmountInString(inputHelper.prompt("Please enter transfer amount and\npress enter to continue or\npress enter to go back to Transaction "));
        if (StringUtils.isBlank(transferredAccount.getTransferredAmountInString())) {
            return;
        }
        inputHelper.prompt("Reference Number: (This is an autogenerated random 6 digits number)\npress enter to continue");
        transferredAccount.setReferenceNumber("343256");

        result.getResult().setTransferredAccount(transferredAccount);
        result.setChoose(VALID);

        return;
    }

    @Override
    public void isValidData(Result<Account> result) {
        result.setChoose(INVALID);
        Account account = result.getResult();
        TransferredAccount transferredAccount = account.getTransferredAccount();

        if (!account.getAccountNumber().matches("[0-9]+")) {
            result.setMessage("Invalid account");
            return;
        }
        if (!transferredAccount.getTransferredAmountInString().matches("[0-9]+")) {
            result.setMessage("Invalid amount");
            return;
        }
        transferredAccount.setTransferredAmount(Integer.parseInt(transferredAccount.getTransferredAmountInString()));
        if (transferredAccount.getTransferredAmount() < 1) {
            result.setMessage("Minimum amount to withdraw is $1");
            return;
        }
        if (transferredAccount.getTransferredAmount() > 1000) {
            result.setMessage("Maximum amount to withdraw is $1000");
            return;
        }
        if (account.getBalance() - transferredAccount.getTransferredAmount() < 0) {
            result.setMessage("Insufficient balance $" + account.getBalance());
            return;
        }

        result.getResult().setTransferredAccount(transferredAccount);
        result.setChoose(VALID);
    }

    public void transferAmount(Result<Account> result) {
        Account account = result.getResult();
        TransferredAccount transferredAccount = account.getTransferredAccount();
        result.setMessage(String.format("Insufficient balance $%s", transferredAccount.getTransferredAmount()));
        result.setChoose(INVALID);

        int remainBalance = account.getBalance() - transferredAccount.getTransferredAmount();
        if (remainBalance < 0) {
            return;
        }

        account.setBalance(remainBalance);
        account.getBalanceHistories().add(new BalanceHistory(transferredAccount.getAccountNumber(), account.getBalance(), 0, transferredAccount.getTransferredAmount()));
        account.setTransferredAccount(transferredAccount);

        Account existingTransferredAccount = accountRepository.getAccount(new Account(transferredAccount.getAccountNumber()));
        existingTransferredAccount.getBalanceHistories().add(new BalanceHistory(account.getAccountNumber(), existingTransferredAccount.getBalance() + transferredAccount.getTransferredAmount(), transferredAccount.getTransferredAmount(), 0));

        accountRepository.updateAccount(account);
        accountRepository.updateAccount(existingTransferredAccount);

        result.setResult(account);
        result.setChoose(VALID);
    }

    @Override
    public void confirmTransaction(Result<Account> result) {
        result.setChoose(INVALID);
        TransferredAccount transferredAccount = result.getResult().getTransferredAccount();
        final String text = String.format(
                "Transfer Confirmation\nDestination Account: %s\nTransfer Amount : %s\n Reference Number : %s\n%s\nChoose Options[2]",
                transferredAccount.getAccountNumber(),
                transferredAccount.getTransferredAmount(),
                transferredAccount.getReferenceNumber(),
                menu.getFundTransferComfirmationOption().entrySet().stream()
                        .map(extractValue).collect(joining("")));

        String chooseInString = inputHelper.prompt(text);

        if (StringUtils.isNotBlank(chooseInString) || !StringUtils.equals(chooseInString, "2"))
            result.setChoose(Integer.parseInt(chooseInString));
    }
}
